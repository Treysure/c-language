/* C语言实现顺序表
 * 逻辑结构：线性表
 * 存储结构：顺序表
 * By Treysure		
*/
#ifndef __SEQLIST_H
#define __SEQLIST_H

#define MAXSIZE 100
typedef struct{
	int data[MAXSIZE];
	int len;
}SeqList;

// 初始化
extern SeqList *InitList();

// 判空
extern int Empty_SeqList(SeqList *L);

// 求长度
extern int Length_SeqList(SeqList *L);

// 打印
extern void Print_SeqList(SeqList *L);

// 销毁
extern int Destroy_SeqList(SeqList *L);

// 取表元
extern int GetElem_SeqList(SeqList *L, int i);

// 按值查找(定位)
extern int Locate_SeqList(SeqList *L, int x);

// 表尾插入元素(附录)
extern int Append_SeqList(SeqList *L, int x);

// 移除末尾元素
extern int Pop_SeqList(SeqList *L);

// 插入元素
extern int Insert_SeqList(SeqList *L, int index, int x);

// 删除元素
extern int Delete_SeqList(SeqList *L, int index);

// 将顺序表(a1, a2, ..., an)以a1为界重排：a1前面的值均比a1小; a1后面的值均比a1大
extern SeqList *Part_SeqList(SeqList *L1, SeqList *L2);

// 合并两个升序序列为新的升序序列
extern SeqList *Merge_SeqList(SeqList *L1, SeqList *L2);

// 比较
extern int Compare_SeqList(SeqList *L1, SeqList *L2);

// 最大值
extern int Max_SeqList(SeqList *L);

// 最小值
extern int Min_SeqList(SeqList *L);

// 排序（冒泡排序），rev 为 0 表示升序排列， rev为1 表示降序排列
extern int Sort_SeqList(SeqList *L, int rev);

// 逆置
extern void Reverse_SeqList(SeqList *L);

#endif
