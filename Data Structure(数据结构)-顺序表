/* 逻辑结构：线性表
 * 存储结构：顺序表
 * By Treysure		
*/
#include "SeqList.h"
#include <stdio.h>
#include <stdlib.h>

SeqList *Init_SeqList(){ // 初始化
	SeqList *L = (SeqList *)malloc(sizeof(SeqList));
	if(L == NULL){
		return NULL;   // 返回空指针  
	}else{
		L->len = 0;
		return L;
	}
}

int Empty_SeqList(SeqList *L){	// 判空
	if(L == NULL || L->len == 0){
		return 1;	// 1表示为空
	}else{
		return 0;   // 0表示非空
	}
}

int Length_SeqList(SeqList *L){			// 求长度
	if(L == NULL){
		return -1;  // 异常终止
	}
	return L->len;  // 如果顺序表有效， 则返回有效长度
}

void Print_SeqList(SeqList *L){			// 打印
	if (L == NULL || L->len == 0){
		return;
	}
	printf("length: %d, {", L->len);
	for (int i = 0; i < L->len; i++){
		printf("%d, ", L->data[i]);
	}
	printf("\b\b}\n");    
	/*	以下转义序列。在复制到输出流时，这些序列导致它们的相关操作在有此功能的设备上显示：
　　\\ 反斜杠
　　\a 警告
　　\b 退格
　　\f 换页
　　\n 换行
　　\r 回车
　　\t 跳格
　　\v 垂直跳格
	*/
}

int Destroy_SeqList(SeqList *L){					// 销毁
	if(L == NULL){
		return 0;	// 已经处于销毁状态
	}else{
		free(L);
		return 1;   // 1 表示成功释放掉了申请的内存
	}
}

int GetElem_SeqList(SeqList *L, int i){				// 取表元
	if(L == NULL || L->len == 0 || i < 0 || i >= L->len){
		return -1;	// 【原作者此处标为return 0】，应为异常返回
	}
	return L->data[i];
}

int Locate_SeqList(SeqList *L, int x){				// 按值查找(只能定位第一个与x相同的位置索引)				
	if(L == NULL || L->len == 0){
		return -1;    // 异常返回，
	}else{
		int index = -1;
		for (int i = 0; i < L->len; i++){
			if (L->data[i] == x){  // 定位到x的位置
				index = i;
				break;
			}
		}
		return index;
	}
}

int Append_SeqList(SeqList *L, int x){				// 表尾插入元素
	if(L == NULL || L->len == MAXSIZE){
		return -1;  // 异常退出
	}else{
		L->data[L->len] = x;
		L->len++;
		return x;   //   
	}
}

int Pop_SeqList(SeqList *L){						// 移除末尾元素
	if(L == NULL || L->len == 0){
		return -1;  // 异常退出
	}else{
		int val = L->data[L->len-1];
		L->data[L->len-1] = 0; //  等于0算删除？ wrong！
		L->len--;
		return val;
	}
}

int Insert_SeqList(SeqList *L, int index, int x){	// 插入元素
	if (L == NULL || index >= MAXSIZE || L->len == MAXSIZE){
		return -1;  // 异常退出
	}else if(L->len == 0 || index > L->len){
		L->data[index] = x;
		L->len = index + 1;
		return 0;
	}else{          // 如果index比len小，那么自index往后所有都要移位
		for (int i = L->len-1; i >= index; i--){
			L->data[i+1] = L->data[i];
		}
		L->data[index] = x;
		L->len++;
		return 0;
	}
}

int Delete_SeqList(SeqList *L, int index){			// 删除元素
	if(L == NULL || L->len == 0 || index >= L->len){
		return -1; // 异常退出
	}else if(index == L->len-1){
		L->data[index] = 0;
		L->len--;
		return 0;
	}else{
		for(int i = index + 1; i < L->len; i++){
			L->data[i-1] = L->data[i];
		}
		L->len--;
		return 0;
	}
}

int Part_SeqList(SeqList *L){		// 将顺序表重排						
	if(L == NULL || L->len == 0){
		return -1;  // 异常退出
	}else{
		int base = L->data[0];      // 以第一个数为届，a1前面的数均比a1小，a1后面的数均比a1大
		int temp;
		for (int i = 1; i < L->len; i++){
			int cnt = 0;
			if (L->data[i] < base){
				temp = L->data[i];
				for (int j = i-1; j >= cnt; j--){
					L->data[j+1] = L->data[j];
				}
				L->data[cnt] = temp;
				++cnt;
			}
		}
		return 0;
	}
}


SeqList *Merge_SeqList(SeqList *L1, SeqList *L2){	// 合并两个升序序列为一个序列
	if(L1 == NULL || L2 == NULL || L1->len == 0 || L2->len == 0 || L1->len + L2->len > MAXSIZE){
		return NULL;
	}else{
		SeqList *L = Init_SeqList();
		if (L == NULL){
			return NULL;
		}
		int i=0, j=0, k=0;
		while (i < L1->len && j < L2->len){
			if (L1->data[i] < L2->data[j]){
				L->data[k++] = L1->data[i++];
				L->len++;
			}else{
				L->data[k++] = L2->data[j++];
				L->len++;
			}
		}
		for (; i < L1->len; i++, k++){
			L->data[k] = L1->data[i];
			L->len++;
		}
		for (; j < L2->len; j++, k++){
			L->data[k] = L2->data[j];
			L->len++;
		}
		return L;    // 返回重新排序后的序列
	}
}

int Compare_SeqList(SeqList *L1, SeqList *L2){							// 比较两个队列
	if(L1 == NULL || L2 == NULL || L1->len == 0 || L2->len == 0){
		return 0;
	}else{
		int mark = 0;
		while (L1->data[mark] == L2->data[mark] && (mark < L1->len || mark < L2->len) ){
			mark++;
		}
		if(mark == L1->len && mark == L2->len){
			return 0;
		}else if((mark == L1->len && mark < L2->len) || (mark < L1->len && mark < L2->len && L1->data[mark] < L2->data[mark])){
			return -1;    // 队列1 比队列2 小
		}else{
			return 1;	  // 队列1 比 队列2 大 
		}
	}
}

int Max_SeqList(SeqList *L){   
	if(L == NULL || L->len == 0){
		return 0;		// 没有值！？
	}else{
		int maxval = L->data[0];  // 以队列首元素为基准值
		for (int i = 1; i < L->len; i++){
			if (maxval < L->data[i]){
				maxval = L->data[i];
			}
		}
		return maxval;
	}
}

int Min_SeqList(SeqList *L){			// 求队列最小值
	if(L == NULL || L->len == 0){
		return 0;
	}else{
		int minval = L->data[0];
		for (int i = 1; i < L->len; i++){
			if(minval > L->data[i]){
				minval = L->data[i];
			}
		}
		return minval;
	}
}

//排序（冒泡排序），rev 为 0 表示升序排列， rev为1 表示降序排列
int Sort_SeqList(SeqList *L, int rev){					// 队列排序
	if(L == NULL || L->len == 0){
		return -1;   // 异常退出
	}else{
		for (int i = 0; i < L->len; i++){
			int sorted = 1;					// 是否完成排序标志
			for (int j = 0; j < L->len; j++){
				if(!rev){      // rev为0 表示升序排列
					if (L->data[j] > L->data[j+1]){
						sorted = 0;
						int temp = L->data[j];
						L->data[j] = L->data[j+1];
						L->data[j+1] = temp;
					}
				}else{		   // rev为1 表示降序排列
					if (L->data[j] < L->data[j+1]){
						sorted = 0;
						int temp = L->data[j];
						L->data[j] = L->data[j+1];
						L->data[j+1] = temp;
					}
				}
			}
			if(sorted){
				break;
			}
		}
		return 0;
	}
}

void Reverse_SeqList(SeqList *L){			// 逆置队列
	if (L ==NULL || L->len ==0){
		return;		// 退出
	}
	for (int i = 0; i < L->len/2; i++){
		int temp = L->data[i];
		L->data[i] = L->data[L->len-1 - i];
		L->data[L->len-1 - i] = L->data[i];
	}
}
